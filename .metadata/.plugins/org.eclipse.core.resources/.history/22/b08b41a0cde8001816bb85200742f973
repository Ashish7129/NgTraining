import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;


public class Watcher {
	public static void watcher() {
		Path dir = Paths
				.get("data");
		try {
			while (true) {
				WatchService watcher = dir.getFileSystem().newWatchService();
				dir.register(watcher, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE,
						StandardWatchEventKinds.ENTRY_MODIFY);
				WatchKey watchKey = watcher.poll(5, TimeUnit.SECONDS); 
					List<WatchEvent<?>> events = watchKey.pollEvents();
					for (WatchEvent event : events) {
						if (event.kind() == StandardWatchEventKinds.ENTRY_CREATE) {
							System.out.println("Created: " + event.context().toString());
							if(!resultantFlights.containsKey(event.context().toString())) {
								DirectoryReader.readFile(event.context().toString());
							}
						}
						if (event.kind() == StandardWatchEventKinds.ENTRY_DELETE) {
							System.out.println("Delete: " + event.context().toString());
							if(resultantFlights.containsKey(event.context().toString())) {
								DirectoryReader.flightInfo.remove(event.context().toString());
							}
							
						}
						if (event.kind() == StandardWatchEventKinds.ENTRY_MODIFY) {
							System.out.println("Modify: " + event.context().toString());
							if(!resultantFlights.containsKey(event.context().toString())) {
								DirectoryReader.readFile(event.context().toString());
							}
						}
					}
				
			//	watchKey.reset();
				}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
